{"ast":null,"code":"import { authAPI, ResultCodeForCapctha, ResultCodesEnum, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let meData = await authAPI.me();\n\n  if (meData.resultCode === ResultCodesEnum.Success) {\n    let {\n      id,\n      login,\n      email\n    } = meData.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let data = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (data.resultCode === ResultCodesEnum.Success) {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (data.resultCode === ResultCodeForCapctha.CaptchaIsRequired) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/dima/Desktop/react-way-of-samurai/src/redux/auth-reducer.ts"],"names":["authAPI","ResultCodeForCapctha","ResultCodesEnum","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","meData","me","resultCode","Success","id","data","password","rememberMe","captcha","CaptchaIsRequired","getCaptchaUrl","message","messages","length","_error","response","url","logout"],"mappings":"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","sourcesContent":["import {authAPI, ResultCodeForCapctha, ResultCodesEnum, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\ntype SetAuthUserDataActionPayloadType = {\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n}\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA,\n    payload: SetAuthUserDataActionPayloadType\n}\n\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\n    type: SET_USER_DATA, payload:\n        {userId, email, login, isAuth}\n});\n\ntype GetCaptchaUrlSuccessActionType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS\n    payload: { captchaUrl: string }\n}\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n});\n\nexport const getAuthUserData = () => async (dispatch: any) => {\n    let meData = await authAPI.me();\n\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapctha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\n}\n\n\n\nexport const logout = () => async (dispatch: any) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/react-way-of-samurai/src/components/common/Paginator/Paginator.tsx\";\nimport React, { useState } from 'react';\nimport styles from './Paginator.module.css';\nimport cn from 'classnames';\n\nlet Paginator = ({\n  totalItemsCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10\n}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return React.createElement(\"div\", {\n    className: cn(styles.paginator),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, portionNumber > 1 && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"PREV\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n    return React.createElement(\"span\", {\n      className: cn({\n        [styles.selectedPage]: currentPage === p\n      }, styles.pageNumber),\n      key: p,\n      onClick: e => {\n        onPageChanged(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, p);\n  }), portionCount > portionNumber && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"NEXT\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/home/dima/Desktop/react-way-of-samurai/src/components/common/Paginator/Paginator.tsx"],"names":["React","useState","styles","cn","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","selectedPage","pageNumber","e"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;;AAUA,IAAIC,SAA8B,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,QAAlB;AACAC,EAAAA,WADA;AAEAC,EAAAA,aAFA;AAGAC,EAAAA,WAAW,GAAG;AAHd,CAAD,KAGuB;AAExD,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;AAEA,MAAIO,KAAoB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,WAAvB,CAAnB;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;AAEA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;AAGA,SAAO;AAAK,IAAA,SAAS,EAAEN,EAAE,CAACD,MAAM,CAACmB,SAAR,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDJ,aAAa,GAAG,CAAhB,IACF;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFG,EAIEJ,KAAK,CACDS,MADJ,CACWC,CAAC,IAAIA,CAAC,IAAIJ,qBAAL,IAA8BI,CAAC,IAAEH,sBADjD,EAEII,GAFJ,CAESD,CAAD,IAAO;AACZ,WAAO;AAAM,MAAA,SAAS,EAAGpB,EAAE,CAAC;AACxB,SAACD,MAAM,CAACuB,YAAR,GAAuBlB,WAAW,KAAKgB;AADf,OAAD,EAExBrB,MAAM,CAACwB,UAFiB,CAApB;AAGM,MAAA,GAAG,EAAEH,CAHX;AAIM,MAAA,OAAO,EAAGI,CAAD,IAAO;AACZnB,QAAAA,aAAa,CAACe,CAAD,CAAb;AACH,OANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMUA,CANV,CAAP;AAOH,GAVA,CAJF,EAeDP,YAAY,GAAGC,aAAf,IACE;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBD,CAAP;AAoBH,CAvCD;;AAyCA,eAAeb,SAAf","sourcesContent":["import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage: number\n    onPageChanged: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                      currentPage,\n                                      onPageChanged,\n                                      portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n"]},"metadata":{},"sourceType":"module"}